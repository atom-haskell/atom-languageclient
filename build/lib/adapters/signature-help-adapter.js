"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const convert_1 = require("../convert");
const atom_1 = require("atom");
class SignatureHelpAdapter {
    constructor(server, grammarScopes) {
        this._disposables = new atom_1.CompositeDisposable();
        this._connection = server.connection;
        this._capabilities = server.capabilities;
        this._grammarScopes = grammarScopes;
    }
    // Returns a {Boolean} indicating this adapter can adapt the server based on the
    // given serverCapabilities.
    static canAdapt(serverCapabilities) {
        return serverCapabilities.signatureHelpProvider != null;
    }
    dispose() {
        this._disposables.dispose();
    }
    attach(register) {
        const { signatureHelpProvider } = this._capabilities;
        assert(signatureHelpProvider != null);
        let triggerCharacters;
        if (signatureHelpProvider && Array.isArray(signatureHelpProvider.triggerCharacters)) {
            triggerCharacters = new Set(signatureHelpProvider.triggerCharacters);
        }
        this._disposables.add(register({
            priority: 1,
            grammarScopes: this._grammarScopes,
            triggerCharacters,
            getSignatureHelp: this.getSignatureHelp.bind(this),
        }));
    }
    // Public: Retrieves signature help for a given editor and position.
    getSignatureHelp(editor, point) {
        return this._connection.signatureHelp(convert_1.default.editorToTextDocumentPositionParams(editor, point));
    }
}
exports.default = SignatureHelpAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLWhlbHAtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9zaWduYXR1cmUtaGVscC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWtDO0FBQ2xDLHdDQUFpQztBQUVqQywrQkFJYztBQU9kO0lBTUUsWUFBWSxNQUFvQixFQUFFLGFBQXVCO1FBTGpELGlCQUFZLEdBQXdCLElBQUksMEJBQW1CLEVBQUUsQ0FBQztRQU1wRSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDckMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxnRkFBZ0Y7SUFDaEYsNEJBQTRCO0lBQ3JCLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQXNDO1FBQzNELE9BQU8sa0JBQWtCLENBQUMscUJBQXFCLElBQUksSUFBSSxDQUFDO0lBQzFELENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQXVDO1FBQ25ELE1BQU0sRUFBQyxxQkFBcUIsRUFBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDbkQsTUFBTSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxDQUFDO1FBRXRDLElBQUksaUJBQTBDLENBQUM7UUFDL0MsSUFBSSxxQkFBcUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDbkYsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUN0RTtRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUNuQixRQUFRLENBQUM7WUFDUCxRQUFRLEVBQUUsQ0FBQztZQUNYLGFBQWEsRUFBRSxJQUFJLENBQUMsY0FBYztZQUNsQyxpQkFBaUI7WUFDakIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbkQsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsb0VBQW9FO0lBQzdELGdCQUFnQixDQUFDLE1BQWtCLEVBQUUsS0FBWTtRQUN0RCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLGlCQUFPLENBQUMsa0NBQWtDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkcsQ0FBQztDQUNGO0FBN0NELHVDQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGF0b21JZGUgZnJvbSAnYXRvbS1pZGUnO1xuaW1wb3J0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vY29udmVydCc7XG5pbXBvcnQgeyBBY3RpdmVTZXJ2ZXIgfSBmcm9tICcuLi9zZXJ2ZXItbWFuYWdlcic7XG5pbXBvcnQge1xuICBDb21wb3NpdGVEaXNwb3NhYmxlLFxuICBQb2ludCxcbiAgVGV4dEVkaXRvcixcbn0gZnJvbSAnYXRvbSc7XG5pbXBvcnQge1xuICBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXG4gIFNlcnZlckNhcGFiaWxpdGllcyxcbiAgU2lnbmF0dXJlSGVscCxcbn0gZnJvbSAnLi4vbGFuZ3VhZ2VjbGllbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaWduYXR1cmVIZWxwQWRhcHRlciB7XG4gIHByaXZhdGUgX2Rpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcbiAgcHJpdmF0ZSBfY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uO1xuICBwcml2YXRlIF9jYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcztcbiAgcHJpdmF0ZSBfZ3JhbW1hclNjb3Blczogc3RyaW5nW107XG5cbiAgY29uc3RydWN0b3Ioc2VydmVyOiBBY3RpdmVTZXJ2ZXIsIGdyYW1tYXJTY29wZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5fY29ubmVjdGlvbiA9IHNlcnZlci5jb25uZWN0aW9uO1xuICAgIHRoaXMuX2NhcGFiaWxpdGllcyA9IHNlcnZlci5jYXBhYmlsaXRpZXM7XG4gICAgdGhpcy5fZ3JhbW1hclNjb3BlcyA9IGdyYW1tYXJTY29wZXM7XG4gIH1cblxuICAvLyBSZXR1cm5zIGEge0Jvb2xlYW59IGluZGljYXRpbmcgdGhpcyBhZGFwdGVyIGNhbiBhZGFwdCB0aGUgc2VydmVyIGJhc2VkIG9uIHRoZVxuICAvLyBnaXZlbiBzZXJ2ZXJDYXBhYmlsaXRpZXMuXG4gIHB1YmxpYyBzdGF0aWMgY2FuQWRhcHQoc2VydmVyQ2FwYWJpbGl0aWVzOiBTZXJ2ZXJDYXBhYmlsaXRpZXMpOiBib29sZWFuIHtcbiAgICByZXR1cm4gc2VydmVyQ2FwYWJpbGl0aWVzLnNpZ25hdHVyZUhlbHBQcm92aWRlciAhPSBudWxsO1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMuZGlzcG9zZSgpO1xuICB9XG5cbiAgcHVibGljIGF0dGFjaChyZWdpc3RlcjogYXRvbUlkZS5TaWduYXR1cmVIZWxwUmVnaXN0cnkpOiB2b2lkIHtcbiAgICBjb25zdCB7c2lnbmF0dXJlSGVscFByb3ZpZGVyfSA9IHRoaXMuX2NhcGFiaWxpdGllcztcbiAgICBhc3NlcnQoc2lnbmF0dXJlSGVscFByb3ZpZGVyICE9IG51bGwpO1xuXG4gICAgbGV0IHRyaWdnZXJDaGFyYWN0ZXJzOiBTZXQ8c3RyaW5nPiB8IHVuZGVmaW5lZDtcbiAgICBpZiAoc2lnbmF0dXJlSGVscFByb3ZpZGVyICYmIEFycmF5LmlzQXJyYXkoc2lnbmF0dXJlSGVscFByb3ZpZGVyLnRyaWdnZXJDaGFyYWN0ZXJzKSkge1xuICAgICAgdHJpZ2dlckNoYXJhY3RlcnMgPSBuZXcgU2V0KHNpZ25hdHVyZUhlbHBQcm92aWRlci50cmlnZ2VyQ2hhcmFjdGVycyk7XG4gICAgfVxuXG4gICAgdGhpcy5fZGlzcG9zYWJsZXMuYWRkKFxuICAgICAgcmVnaXN0ZXIoe1xuICAgICAgICBwcmlvcml0eTogMSxcbiAgICAgICAgZ3JhbW1hclNjb3BlczogdGhpcy5fZ3JhbW1hclNjb3BlcyxcbiAgICAgICAgdHJpZ2dlckNoYXJhY3RlcnMsXG4gICAgICAgIGdldFNpZ25hdHVyZUhlbHA6IHRoaXMuZ2V0U2lnbmF0dXJlSGVscC5iaW5kKHRoaXMpLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogUmV0cmlldmVzIHNpZ25hdHVyZSBoZWxwIGZvciBhIGdpdmVuIGVkaXRvciBhbmQgcG9zaXRpb24uXG4gIHB1YmxpYyBnZXRTaWduYXR1cmVIZWxwKGVkaXRvcjogVGV4dEVkaXRvciwgcG9pbnQ6IFBvaW50KTogUHJvbWlzZTxTaWduYXR1cmVIZWxwIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uLnNpZ25hdHVyZUhlbHAoQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKGVkaXRvciwgcG9pbnQpKTtcbiAgfVxufVxuIl19